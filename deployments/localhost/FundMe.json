{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9f062f2e6c7e949fae4eeeacbd888a9627333804e3a477a9ab3c59d698d79f6a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1065908",
    "logsBloom": "0x
    "blockHash": "0x1f4d668353560ac86a118d785449d76df630f58d18343fa8a4b832a28c552a10",
    "transactionHash": "0x9f062f2e6c7e949fae4eeeacbd888a9627333804e3a477a9ab3c59d698d79f6a",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1065908",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "7772d3fbfd8ca15ef1d3f9562487623c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Bobby William Major\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"This is a project for crowdfunding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is a demo\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/**\\n * @title This is a project for crowdfunding\\n * @author Bobby William Major\\n * @notice This contract is a demo\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    function cheaperWithdraw() public payable onlyOwner{\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory\\n        for (uint256 fundersIndex = 0; fundersIndex < funders.length; fundersIndex++){\\n            address funder = funders[fundersIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Call failed\\\");\\n        \\n    }\\n\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    \\n}\",\"keccak256\":\"0x5f4a8a80069ed95d899dc5703f9fdb0a44aa1a1865c041cc12754cb84cf7bb84\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n  // We could make this public, but then we'd have to deploy it\\n  function getPrice(\\n    AggregatorV3Interface priceFeed\\n  ) internal view returns (uint256) {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n    // or (Both will do the same thing)\\n    // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n  }\\n\\n  // 1000000000\\n  function getConversionRate(\\n    uint256 ethAmount,\\n    AggregatorV3Interface priceFeed\\n  ) internal view returns (uint256) {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // or (Both will do the same thing)\\n    // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n    // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0xb541cf4051ab15d523ddc36e8cc04be207ae4b2784d8ab42280f516c465cab66\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012eb380380620012eb83398181016040528101906200003791906200012a565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b61117f806200016c6000396000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ab7565b6102f8565b6040516100cc9190610afd565b60405180910390f35b3480156100e157600080fd5b506100ea610340565b005b3480156100f857600080fd5b50610101610582565b60405161010e9190610afd565b60405180910390f35b34801561012357600080fd5b5061012c61058f565b6040516101399190610b27565b60405180910390f35b34801561014e57600080fd5b506101576105b9565b6040516101649190610ba1565b60405180910390f35b6101756101be565b005b61017f6105e3565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610be8565b610889565b6040516101b59190610b27565b60405180910390f35b6802b5e3af16b18800006101fd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d190919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c72565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028c9190610cc1565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610472576000600182815481106103ed576103ec610d17565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046a90610d46565b9150506103ca565b50600067ffffffffffffffff81111561048e5761048d610d8f565b5b6040519080825280602002602001820160405280156104bc5781602001602082028036833780820191505090505b50600190805190602001906104d29291906109ad565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f990610def565b60006040518083038185875af1925050503d8060008114610536576040519150601f19603f3d011682016040523d82523d6000602084013e61053b565b606091505b505090508061057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690610e50565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106a4575b5050505050905060005b815181101561077857600082828151811061071657610715610d17565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077090610d46565b9150506106f8565b50600067ffffffffffffffff81111561079457610793610d8f565b5b6040519080825280602002602001820160405280156107c25781602001602082028036833780820191505090505b50600190805190602001906107d89291906109ad565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107ff90610def565b60006040518083038185875af1925050503d806000811461083c576040519150601f19603f3d011682016040523d82523d6000602084013e610841565b606091505b5050905080610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c90610e50565b60405180910390fd5b5050565b60006001828154811061089f5761089e610d17565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108dd8361090d565b90506000670de0b6b3a764000085836108f69190610e70565b6109009190610ef9565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095657600080fd5b505afa15801561096a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098e9190610fb7565b5050509150506402540be400816109a59190611032565b915050919050565b828054828255906000526020600020908101928215610a26579160200282015b82811115610a255782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109cd565b5b509050610a339190610a37565b5090565b5b80821115610a50576000816000905550600101610a38565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8482610a59565b9050919050565b610a9481610a79565b8114610a9f57600080fd5b50565b600081359050610ab181610a8b565b92915050565b600060208284031215610acd57610acc610a54565b5b6000610adb84828501610aa2565b91505092915050565b6000819050919050565b610af781610ae4565b82525050565b6000602082019050610b126000830184610aee565b92915050565b610b2181610a79565b82525050565b6000602082019050610b3c6000830184610b18565b92915050565b6000819050919050565b6000610b67610b62610b5d84610a59565b610b42565b610a59565b9050919050565b6000610b7982610b4c565b9050919050565b6000610b8b82610b6e565b9050919050565b610b9b81610b80565b82525050565b6000602082019050610bb66000830184610b92565b92915050565b610bc581610ae4565b8114610bd057600080fd5b50565b600081359050610be281610bbc565b92915050565b600060208284031215610bfe57610bfd610a54565b5b6000610c0c84828501610bd3565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c5c601b83610c15565b9150610c6782610c26565b602082019050919050565b60006020820190508181036000830152610c8b81610c4f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ccc82610ae4565b9150610cd783610ae4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d0c57610d0b610c92565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d5182610ae4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d8457610d83610c92565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dd9600083610dbe565b9150610de482610dc9565b600082019050919050565b6000610dfa82610dcc565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e3a600b83610c15565b9150610e4582610e04565b602082019050919050565b60006020820190508181036000830152610e6981610e2d565b9050919050565b6000610e7b82610ae4565b9150610e8683610ae4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ebf57610ebe610c92565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f0482610ae4565b9150610f0f83610ae4565b925082610f1f57610f1e610eca565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f4981610f2a565b8114610f5457600080fd5b50565b600081519050610f6681610f40565b92915050565b6000819050919050565b610f7f81610f6c565b8114610f8a57600080fd5b50565b600081519050610f9c81610f76565b92915050565b600081519050610fb181610bbc565b92915050565b600080600080600060a08688031215610fd357610fd2610a54565b5b6000610fe188828901610f57565b9550506020610ff288828901610f8d565b945050604061100388828901610fa2565b935050606061101488828901610fa2565b925050608061102588828901610f57565b9150509295509295909350565b600061103d82610f6c565b915061104883610f6c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561108757611086610c92565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110c4576110c3610c92565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561110157611100610c92565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561113e5761113d610c92565b5b82820290509291505056fea2646970667358221220d1b76f54807447aabd26ad3336d76dede36531e2c61b14310c7c8c6dc439927f64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ab7565b6102f8565b6040516100cc9190610afd565b60405180910390f35b3480156100e157600080fd5b506100ea610340565b005b3480156100f857600080fd5b50610101610582565b60405161010e9190610afd565b60405180910390f35b34801561012357600080fd5b5061012c61058f565b6040516101399190610b27565b60405180910390f35b34801561014e57600080fd5b506101576105b9565b6040516101649190610ba1565b60405180910390f35b6101756101be565b005b61017f6105e3565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610be8565b610889565b6040516101b59190610b27565b60405180910390f35b6802b5e3af16b18800006101fd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d190919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c72565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028c9190610cc1565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610472576000600182815481106103ed576103ec610d17565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046a90610d46565b9150506103ca565b50600067ffffffffffffffff81111561048e5761048d610d8f565b5b6040519080825280602002602001820160405280156104bc5781602001602082028036833780820191505090505b50600190805190602001906104d29291906109ad565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f990610def565b60006040518083038185875af1925050503d8060008114610536576040519150601f19603f3d011682016040523d82523d6000602084013e61053b565b606091505b505090508061057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690610e50565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106a4575b5050505050905060005b815181101561077857600082828151811061071657610715610d17565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077090610d46565b9150506106f8565b50600067ffffffffffffffff81111561079457610793610d8f565b5b6040519080825280602002602001820160405280156107c25781602001602082028036833780820191505090505b50600190805190602001906107d89291906109ad565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107ff90610def565b60006040518083038185875af1925050503d806000811461083c576040519150601f19603f3d011682016040523d82523d6000602084013e610841565b606091505b5050905080610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c90610e50565b60405180910390fd5b5050565b60006001828154811061089f5761089e610d17565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108dd8361090d565b90506000670de0b6b3a764000085836108f69190610e70565b6109009190610ef9565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095657600080fd5b505afa15801561096a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098e9190610fb7565b5050509150506402540be400816109a59190611032565b915050919050565b828054828255906000526020600020908101928215610a26579160200282015b82811115610a255782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109cd565b5b509050610a339190610a37565b5090565b5b80821115610a50576000816000905550600101610a38565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8482610a59565b9050919050565b610a9481610a79565b8114610a9f57600080fd5b50565b600081359050610ab181610a8b565b92915050565b600060208284031215610acd57610acc610a54565b5b6000610adb84828501610aa2565b91505092915050565b6000819050919050565b610af781610ae4565b82525050565b6000602082019050610b126000830184610aee565b92915050565b610b2181610a79565b82525050565b6000602082019050610b3c6000830184610b18565b92915050565b6000819050919050565b6000610b67610b62610b5d84610a59565b610b42565b610a59565b9050919050565b6000610b7982610b4c565b9050919050565b6000610b8b82610b6e565b9050919050565b610b9b81610b80565b82525050565b6000602082019050610bb66000830184610b92565b92915050565b610bc581610ae4565b8114610bd057600080fd5b50565b600081359050610be281610bbc565b92915050565b600060208284031215610bfe57610bfd610a54565b5b6000610c0c84828501610bd3565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c5c601b83610c15565b9150610c6782610c26565b602082019050919050565b60006020820190508181036000830152610c8b81610c4f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ccc82610ae4565b9150610cd783610ae4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d0c57610d0b610c92565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d5182610ae4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d8457610d83610c92565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dd9600083610dbe565b9150610de482610dc9565b600082019050919050565b6000610dfa82610dcc565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e3a600b83610c15565b9150610e4582610e04565b602082019050919050565b60006020820190508181036000830152610e6981610e2d565b9050919050565b6000610e7b82610ae4565b9150610e8683610ae4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ebf57610ebe610c92565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f0482610ae4565b9150610f0f83610ae4565b925082610f1f57610f1e610eca565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f4981610f2a565b8114610f5457600080fd5b50565b600081519050610f6681610f40565b92915050565b6000819050919050565b610f7f81610f6c565b8114610f8a57600080fd5b50565b600081519050610f9c81610f76565b92915050565b600081519050610fb181610bbc565b92915050565b600080600080600060a08688031215610fd357610fd2610a54565b5b6000610fe188828901610f57565b9550506020610ff288828901610f8d565b945050604061100388828901610fa2565b935050606061101488828901610fa2565b925050608061102588828901610f57565b9150509295509295909350565b600061103d82610f6c565b915061104883610f6c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561108757611086610c92565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110c4576110c3610c92565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561110157611100610c92565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561113e5761113d610c92565b5b82820290509291505056fea2646970667358221220d1b76f54807447aabd26ad3336d76dede36531e2c61b14310c7c8c6dc439927f64736f6c63430008080033",
  "devdoc": {
    "author": "Bobby William Major",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "This is a project for crowdfunding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is a demo",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}